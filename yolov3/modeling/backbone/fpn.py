# Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved
import math
import  torch
import fvcore.nn.weight_init as weight_init
import torch.nn.functional as F
from torch import nn

from yolov3.layers import  ShapeSpec, get_norm, get_activate, ConvNormAV

from .backbone import Backbone
from  .build import BACKBONE_REGISTRY
from .darknet import build_darknet_backbone


__all__ = ["OutConvLayer", "build_darknet_fpn_backbone", "FPN"]
class OutConvLayer(nn.Module):
    def __init__(self, in_channels,bottleneck_channels, out_channels,  norm="BN", activate="LeakReLU", alpha=0.1):
        super(OutConvLayer, self).__init__()
        conv1 = []
        for i in range(2):
            conv1.append(ConvNormAV(in_channels,
                                         bottleneck_channels,
                                         stride=1,
                                         kernel_size=1,
                                         norm=get_norm(norm, bottleneck_channels),
                                         activate=get_activate(activate, alpha),
                                         bias=False,))
            conv1.append(ConvNormAV(bottleneck_channels,
                                         out_channels,
                                         kernel_size=3,
                                         stride=1,
                                         padding=1,
                                         norm=get_norm(norm, out_channels),
                                         activate=get_activate(activate, alpha),
                                         bias=False, ))
            in_channels = out_channels



        conv1.append(ConvNormAV(in_channels,
                         bottleneck_channels,
                         kernel_size=1,
                         stride=1,
                         norm=get_norm(norm, bottleneck_channels),
                         activate=get_activate(activate, alpha),
                         bias=False, ))
        self.conv1 = nn.Sequential(*conv1)



    def forward(self, x):
        out = self.conv1(x)
        return out

class OutLayerFinal(nn.Module):
    def __init__(self, in_channels, out_channels,  norm="BN", activate="LeakReLU", alpha=0.1):
        super(OutLayerFinal, self).__init__()
        self.conv_final = ConvNormAV(in_channels,
                                     out_channels,
                                     kernel_size=1,
                                     stride=1,
                                     norm=get_norm(norm, out_channels ),
                                     activate=get_activate(activate, alpha),
                                     bias=False, )
    def forward(self, x):
        return self.conv_final(x)

class FPN(Backbone):
    """
    This module implements Feature Pyramid Network.
    It creates pyramid features built on top of some input feature maps.
    """

    def __init__(
        self, bottom_up, in_features, out_channels, norm="BN", activate="LeakReLU", alpha=0.1,
            fuse_type="concat"
    ):
        """
        Args:
            bottom_up (Backbone): module representing the bottom up subnetwork.
                Must be a subclass of :class:`Backbone`. The multi-scale feature
                maps generated by the bottom up network, and listed in `in_features`,
                are used to generate FPN levels.
            in_features (list[str]): names of the input feature maps coming
                from the backbone to which FPN is attached. For example, if the
                backbone produces ["res3", "res4", "res5"], any *contiguous* sublist
                of these may be used; order must be from high to low resolution.
            out_channels (list): number of channels in the output feature maps.
            norm (str): the normalization to use.
            fuse_type (str): types for fusing the top down features and the lateral
                ones. It can be "sum" (default), which sums up element-wise; or "avg",
                which takes the element-wise mean of the two.
        """
        super(FPN, self).__init__()
        assert isinstance(bottom_up, Backbone)

        # Feature map strides and channels from the bottom up network (e.g. ResNet)
        input_shapes = bottom_up.output_shape()
        in_strides = [input_shapes[f].stride for f in in_features]
        in_channels = [input_shapes[f].channels for f in in_features]
        if fuse_type == 'concat':
            in_channels[:-1] = [in_channels[i] + out_channels[i] for i in range(0,len(in_features)-1)]
        #_assert_strides_are_log2_contiguous(in_strides)
        output_convs = []
        output_final_convs = []


        for idx, in_channel in enumerate(in_channels):
            out_channel = out_channels[idx]
            output_conv = OutConvLayer(
                in_channel,
                out_channel,
                out_channel*2,
                norm=norm,
                activate=activate,
                alpha=alpha,
            )

            stage = int(math.log2(in_strides[idx]))
            self.add_module("fpn_output{}".format(stage), output_conv)
            output_convs.append(output_conv)
        output_final_convs.append(None)

        for idx, out_channel in enumerate(out_channels[1:]):
            output_final_conv = nn.Sequential(OutLayerFinal(out_channel,
                                                         out_channel // 2,
                                                         norm=norm,
                                                         activate=activate,
                                                         alpha=alpha )
                                              )
            stage = int(math.log2(in_strides[idx + 1]))
            self.add_module("fpn_output_final_conv{}".format(stage), output_final_conv)
            output_final_convs.append(output_final_conv)

        # Place convs into top-down order (from low to high resolution)
        # to make the top-down computation in forward clearer.
        self.output_convs = output_convs[::-1]
        self.output_final_convs = output_final_convs[::-1]

        self.in_features = in_features
        self.bottom_up = bottom_up
        # Return feature names are "p<stage>", like ["p2", "p3", ..., "p6"]
        self._out_feature_strides = {"p{}".format(int(math.log2(s))): s for s in in_strides}
        # top block output feature maps.

        self._out_features = list(self._out_feature_strides.keys())
        self._out_feature_channels = {k: out_channels[i] for i, k in enumerate(self._out_features)}
        self._size_divisibility = in_strides[-1]
        assert fuse_type in {"avg", "sum","concat"}
        self._fuse_type = fuse_type

    @property
    def size_divisibility(self):
        return self._size_divisibility

    def forward(self, x):
        """
        Args:
            input (dict[str->Tensor]): mapping feature map name (e.g., "res5") to
                feature map tensor for each feature level in high to low resolution order.

        Returns:
            dict[str->Tensor]:
                mapping from feature map name to FPN feature map tensor
                in high to low resolution order. Returned feature names follow the FPN
                paper convention: "p<stage>", where stage has stride = 2 ** stage e.g.,
                ["p3", "p4", "p5"].
        """
        # Reverse feature maps into top-down order (from low to high resolution)
        bottom_up_features = self.bottom_up(x)
        x = [bottom_up_features[f] for f in self.in_features[::-1]]
        results = []
        result = self.output_convs[0](x[0])
        results.append(result)
        prev_features = self.output_final_convs[0](result)

        for features, output_conv, output_final_conv, in zip(
            x[1:], self.output_convs[1:], self.output_final_convs[1:]
        ):
            top_down_features =F.interpolate(prev_features, scale_factor=2, mode="nearest")
            prev_features = torch.cat((features, top_down_features),1)
            if self._fuse_type == "avg":
                prev_features /= 2
            result = output_conv(prev_features)
            results.insert(0, result)
            if output_final_conv is not  None:
                prev_features = output_final_conv(result)

        assert len(self._out_features) == len(results)
        return dict(zip(self._out_features, results))

    def output_shape(self):
        return {
            name: ShapeSpec(
                channels=self._out_feature_channels[name], stride=self._out_feature_strides[name]
            )
            for name in self._out_features
        }

@BACKBONE_REGISTRY.register()
def build_darknet_fpn_backbone(cfg, input_shape):
    """
    Args:
        cfg: easyDict
        input_shape: ShapeSpec
    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_darknet_backbone(cfg, input_shape)
    in_features = cfg.MODEL.FPN.IN_FEATURES
    out_channels = cfg.MODEL.FPN.OUT_CHANNELS
    backbone = FPN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        norm=cfg.MODEL.FPN.NORM,
        fuse_type=cfg.MODEL.FPN.FUSE_TYPE,
    )
    return backbone
